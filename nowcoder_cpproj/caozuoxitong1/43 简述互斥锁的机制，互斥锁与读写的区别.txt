2.43 简述互斥锁的机制，互斥锁与读写的区别？
参考回答

1.互斥锁机制：mutex，用于保证在任何时刻，都只能有一个线程访问该对象。
当获取锁操作失败时，线程会进入睡眠，等待锁释放时被唤醒。

2.互斥锁和读写锁：

（1） 读写锁区分读者和写者，而互斥锁不区分

（2）互斥锁同一时间只允许一个线程访问该对象，无论读写；读写锁同一时间内只允许一个写者，但是允许多个读者同时读对象。

答案解析

原理详解：

互斥锁其实就是一个bool型变量，为true时表示锁可获取，为false时表示已上锁。
这里说的是互斥锁，其实是泛指linux中所有的锁机制。

我们采用互斥锁保护临界区，从而防止竞争条件。也就是说，一个线程在进入临界区时应得到锁；
它在退出临界区时释放锁。函数 acquire() 获取锁，而函数 release() 释放锁，如图 ：

[43.png]

每个互斥锁有一个布尔变量 available，它的值表示锁是否可用。
如果锁是可用的，那么调用 acquire() 会成功，并且锁不再可用。
当一个线程试图获取不可用的锁时，它会阻塞，直到锁被释放。

按如下定义 acquire()：

acquire() {     while (!available);     /* busy wait */     available = false; }

按如下定义release()：

release() {     available = true; }