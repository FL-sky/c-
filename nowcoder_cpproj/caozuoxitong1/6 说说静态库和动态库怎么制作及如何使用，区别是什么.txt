2.6 说说静态库和动态库怎么制作及如何使用，区别是什么。
参考回答

静态库的制作：

gcc hello.c  -c //这样就生成hello.o目标文件 
ar rcs libhello.a  hello.o//生成libhello.a静态库
静态库的使用：

gcc main.c -lhello -o staticLibrary
//main.c和hello静态库链接，生成staticLibrary执行文件
/*
main.c：是指main主函数     -lhello：是我们生成的.a 文件砍头去尾（lib不要 .a也不要）前面加-l
-L：是指告诉gcc编译器先从-L指定的路径去找静态库，默认是从/usr/lib/ 或者  /usr/local/lib/ 去找。     ./：是指当前路径的意思
staticLibrary：是最后想生成的文件名（这里可随意起名字）
*/

动态库的制作：

gcc -shared -fpic hello.c -o libhello.so -shared 指定生成动态库
-fpic ：fPIC选项作用于编译阶段，在生成目标文件时就得使用该选项，以生成位置无关的代码。

动态库的使用：

gcc main.c -lhello -L ./ -o dynamicDepot 
/*
main.c：是指main主函数     -lhello：是我们生成的.so 文件砍头去尾（lib不要 .so也不要）前面加-l
-L：是指告诉gcc编译器先从-L指定的路径去找静态库，默认是从/usr/lib/ 或者 /usr/local/lib/ 去找。     ./：是指当前路径的意思
dynamicDepot：是最后想生成的文件名（这里可随意起名字）
*/

区别：

1.静态库代码装载的速度快，执行速度略比动态库快。

2.动态库更加节省内存，可执行文件体积比静态库小很多。

3.静态库是在编译时加载，动态库是在运行时加载。

4.生成的静态链接库，Windows下以.lib为后缀，Linux下以.a为后缀。生成的动态链接库，Windows下以.dll为后缀，Linux下以.so为后缀。