1.4.3 说说 STL 中 map hashtable deque list 的实现原理
参考回答

    map、hashtable、deque、list实现机理分别为红黑树、函数映射、双向队列、双向链表，
    他们的特性分别如下：

1.map实现原理

    map内部实现了一个红黑树（红黑树是非严格平衡的二叉搜索树，而AVL是严格平衡二叉搜索树），
    红黑树有自动排序的功能，因此map内部所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。
    因此，对于map进行的查找、删除、添加等一系列的操作都相当于是对红黑树进行的操作。
    map中的元素是按照二叉树（又名二叉查找树、二叉排序树）存储的，
    特点就是左子树上所有节点的键值都小于根节点的键值，右子树所有节点的键值都大于根节点的键值。
    使用中序遍历可将键值按照从小到大遍历出来。

2.hashtable（也称散列表，直译作哈希表）实现原理

    hashtable采用了函数映射的思想记录的存储位置与记录的关键字关联起来，从而能够很快速地进行查找。
    这决定了哈希表特殊的数据结构，它同数组、链表以及二叉排序树等相比较有很明显的区别，
    它能够快速定位到想要查找的记录，而不是与表中存在的记录的关键字进行比较来进行查找。

3.deque实现原理

    deque内部实现的是一个双向队列。元素在内存连续存放。
    随机存取任何元素都在常数时间完成（仅次于vector）。
    所有适用于vector的操作都适用于deque。在两端增删元素具有较佳的性能（大部分情况下是常数时间）。

4.list实现原理

    list内部实现的是一个双向链表。元素在内存不连续存放。
    在任何位置增删元素都能在常数时间完成。不支持随机存取。
    无成员函数，给定一个下标i，访问第i个元素的内容，只能从头部挨个遍历到第i个元素。