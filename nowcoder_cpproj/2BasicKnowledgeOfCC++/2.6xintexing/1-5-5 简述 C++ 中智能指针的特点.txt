1.5.5 简述 C++ 中智能指针的特点
参考回答

1.C++中的智能指针有4种，
分别为：shared_ptr、unique_ptr、weak_ptr、auto_ptr，
其中auto_ptr被C++11弃用。    

2.为什么要使用智能指针：
智能指针的作用是管理一个指针，因为存在申请的空间在函数结束时忘记释放，造成内存泄漏的情况。
使用智能指针可以很大程度上避免这个问题，
因为智能指针就是一个类，当超出了类的作用域时，类会自动调用析构函数，自动释放资源。

3.四种指针各自特性

（1）auto_ptr

    auto指针存在的问题是，两个智能指针同时指向一块内存，就会两次释放同一块资源，自然报错。

（2）unique_ptr

    unique指针规定一个智能指针独占一块内存资源。当两个智能指针同时指向一块内存，编译报错。

    实现原理：将拷贝构造函数和赋值拷贝构造函数申明为private或delete。
    不允许拷贝构造函数和赋值操作符，但是支持移动构造函数，
    通过std:move把一个对象指针变成右值之后可以移动给另一个unique_ptr

（3）shared_ptr

    共享指针可以实现多个智能指针指向相同对象，该对象和其相关资源会在引用为0时被销毁释放。

    实现原理：有一个引用计数的指针类型变量，专门用于引用计数，
    使用拷贝构造函数和赋值拷贝构造函数时，引用计数加1，当引用计数为0时，释放资源。

注意：weak_ptr、shared_ptr存在一个问题，当两个shared_ptr指针相互引用时，
那么这两个指针的引用计数不会下降为0，资源得不到释放。
因此引入weak_ptr，weak_ptr是弱引用，weak_ptr的构造和析构不会引起引用计数的增加或减少。