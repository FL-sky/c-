4.三次握手的过程是怎么样的，tcp的头部字段有哪些？

-----------------------------
A.三次握手的过程是怎么样的

3.8 简述 TCP 三次握手和四次挥手的过程
https://www.nowcoder.com/tutorial/93/e1b14ab2b40a4ef98d9e55830eb48d66

参考回答

[三次握手.jpg]



1）第一次握手：建立连接时，客户端向服务器发送SYN包（seq=x），请求建立连接，等待确认

2）第二次握手：服务端收到客户端的SYN包，回一个ACK包（ACK=x+1）确认收到，同时发送一个SYN包（seq=y）给客户端

3）第三次握手：客户端收到SYN+ACK包，再回一个ACK包（ACK=y+1）告诉服务端已经收到

4）三次握手完成，成功建立连接，开始传输数据


[四次挥手.jpg]

1）客户端发送FIN包（FIN=1)给服务端，告诉它自己的数据已经发送完毕，请求终止连接，此时客户端不发送数据，但还能接收数据

2）服务端收到FIN包，回一个ACK包给客户端告诉它已经收到包了，此时还没有断开socket连接，而是等待剩下的数据传输完毕

3）服务端等待数据传输完毕后，向客户端发送FIN包，表明可以断开连接

4）客户端收到后，回一个ACK包表明确认收到，等待一段时间，确保服务端不再有数据发过来，然后彻底断开连接


3.9 说说 TCP 2次握手行不行？为什么要3次
参考回答

1.为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 
三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤

2.如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认


>为什么TCP的挥手需要四次：

参照三次握手机制，挥手最少需要三次，如果只有三次，客户端发送完数据请求断开连接，而服务端不一定也同样发送完数据，
若同时回ACK和FIN给客户端，断开连接，可能造成数据的损坏；若先发送ACK，再等B的数据发送完了再发送FIN和ACK，就可以保证传输数据的完整性。

tcp是全双工模式，接收到FIN意味着将没有数据再发来，但是还是可以继续发送数据。


>为什么TIME-WAIT状态需要经过2msl（最大报文生存时间）才能返回CLOSE状态：

虽然四个报文都发送完毕，可以进入CLOSE状态，但是网络可能会存在不可靠假象，有可能最后一个ACK丢失，TIME-WAIT状态就是用来重新发送可能丢失的报文。

等待2msl的意义：可靠的终止TCP连接、保证迟来的TCP报文有足够的时间被识别并丢弃；

1、保证A发送的ACK能够顺利到达B，这个报文可能丢失，处在LAST-ACK的B收不到对自己以发送的FIN和ACK报文的确认，B会超时重传FIN和ACK报文，那么在2msl时间内收到这个重传的FIN+ACK报文，接着A重传一次；

2、在这个期间，定义这个连接的插口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用，这个连接只能在2msl结束后才能被使用；

3、为了使旧的数据包在网络中因过期而消失，每个具体的TCP必须选择一个报文最大生存时间MSL，它是任何报文字段被丢弃前在网络内的最长时间。



------------------------

B.[TCP灵魂之问]介绍一下 TCP 报文头部的字段
https://blog.csdn.net/qq_41147507/article/details/109604551


[TCP 报文头部的字段]

*源端口、目标端口
如何标识唯一标识一个连接？答案是 TCP 连接的四元组——源 IP、源端口、目标 IP 和目标端口。

那 TCP 报文怎么没有源 IP 和目标 IP 呢？这是因为在 IP 层就已经处理了 IP 。TCP 只需要记录两者的端口即可。

*序列号
即Sequence number, 指的是本报文段第一个字节的序列号。
序列号在 TCP 通信的过程中有两个作用:

在 SYN 报文中交换彼此的初始序列号。
保证数据包按正确的顺序组装。


*ISN
即Initial Sequence Number（初始序列号）,在三次握手的过程当中，双方会用过SYN报文来交换彼此的 ISN。
ISN 并不是一个固定的值，而是每 4 ms 加一，溢出则回到 0，这个算法使得猜测 ISN 变得很困难。那为什么要这么做？
如果 ISN 被攻击者预测到，要知道源 IP 和源端口号都是很容易伪造的，当攻击者猜测 ISN 之后，直接伪造一个 RST 后，就可以强制连接关闭的，这是非常危险的。
而动态增长的 ISN 大大提高了猜测 ISN 的难度。


*确认号
即ACK(Acknowledgment number)。用来告知对方下一个期望接收的序列号，小于ACK的所有字节已经全部收到。

*标记位
常见的标记位有SYN,ACK,FIN,RST,PSH。

SYN 和 ACK 已经在上文说过，后三个解释如下:
FIN： 即 Finish，表示发送方准备断开连接。
RST：即 Reset，用来强制断开连接。
PSH： 即 Push, 告知对方这些数据包收到后应该马上交给上层的应用，不能缓存。

*窗口大小
占用两个字节，实际上是不够用的。因此 TCP 引入了窗口缩放的选项，作为窗口缩放的比例因子，这个比例因子的范围在 0 ~ 14，比例因子可以将窗口的值扩大为原来的 2 ^ n 次方。

*校验和
占用两个字节，防止传输过程中数据包有损坏，如果遇到校验和有差错的报文，TCP 直接丢弃之，等待重传。

*可选项
常用的可选项有以下几个:
TimeStamp: TCP 时间戳，后面详细介绍。
MSS: 指的是 TCP 允许的从对方接收的最大报文段。
SACK: 选择确认选项。
Window Scale： 窗口缩放选项。




UDP协议的特点及UDP头部结构
https://blog.csdn.net/ASJBFJSB/article/details/80357111


UDP协议的特点：
（1）UDP无需建立连接。因此UDP不会引入建立连接的时延。试想如果DNS运行在TCP之上而不是UDP，则DNS的速度会满很多。HTTP使用TCP而不是UDP，是因为基于文本数据的Web网页来说，可靠性是至关重要的。
什么是DNS？ DNS（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。

（2）无连接状态。TCP需要在端系统中维护连接状态。此连接状态包括接受和发送缓存、拥塞控制参数和确认号和序号的参数。而UDP不维护连接状态，也不跟踪这些参数，因此某些专用应用服务器使用UDP时，一般都能支持更多的活动客户机。

（3）分组首部开销更小。TCP有20字节的的首部开销，而UDP只有8个字节的首部开销。

（4）应用层能够更地控制要发送的数据和发送时间。UDP没有拥塞控制，因此网络中的拥塞也不会影响主机的发送效率。某些实时应用（如直播）要求以稳定的速度发送，能容忍一些数据的丢失，但不允许有较大的时延，而UDP正好可以满足这些应用的需求。

（5）UDP常用于一次性传输比较小数据的网络应用，如DNS、SNMP等，因为对于这些应用，若采用TCP，则将为创建连接、维护和拆除而带来不小的开销。UDP也常用于多媒体应用（如IP电话、实时视频会议、流媒体等），显然，可靠数据传输对于这些应用来说并不是最重要的，但TCP的拥塞控制会导致数据出现较大的延迟，这是它们不可容忍的。

（6）UDP提供尽最大努力的交付，即不保证可靠交付，但并不意味着应用对数据的要求是不可靠的，因此需要维护传输可靠性的工作需要用户在应用层来完成。应用实体可以根据应用需求来灵活设计自己的可靠性机制。

（7）UDP是面向报文的的。发送方UDP对应用层交下来的报文，在添加首部后就交付给IP层，既不合并，也不拆分，而是保留这些报文的边界；接受方UDP对IP层交上来的用户数据报，在去除首部后就原封不动的交付给上层的应用进程，一次交付一个完整的报文，因此报文不可分割，是UDP数据处理的最小单位。

[UDP头部结构.png]

头部结构中各部分的作用：
（1）16位源端口号 记录源端口号，在需要对方回信时选用。不需要时可用全0。
（2）16位目的端口号 记录目标端口号。这在终点交付报文时必须要使用到。
（3）长度 UDP数据报的长度（包括数据和首部），其最小值为8B（即仅有首部没有数据的情况）。
（4）校验和 检测UDP数据报在传输中是否有错，有错就丢弃。该字段时可选的，当源主机不想计算校验和，则直接令该字段为全0。当传输层从IP层收到UDP数据报时，就根据首部中的目的端口，把UDP数据报通过相应的端口，上交给进程。如果接收方UDP发现收到的报文中目的端口号不正确（即不存在对应端口号的应用进程），就丢弃该报文，并由ICMP发送“端口不可达”差错报文交给发送方。


--------
3.10 简述 TCP 和 UDP 的区别
参考回答

TCP协议是有连接的，有连接的意思是开始传输实际数据之前TCP的客户端和服务器端必须通过三次握手建立连接，会话结束之后也要结束连接。而UDP是无连接的

TCP协议保证数据按序发送，按序到达，提供超时重传来保证可靠性，但是UDP不保证按序到达，甚至不保证到达，只是努力交付，即便是按序发送的序列，也不保证按序送到。

TCP协议所需资源多，TCP首部需20个字节（不算可选项），UDP首部字段只需8个字节。

TCP有流量控制和拥塞控制，UDP没有，网络拥堵不会影响发送端的发送速率

TCP是一对一的连接，而UDP则可以支持一对一，多对多，一对多的通信。

TCP面向的是字节流的服务，UDP面向的是报文的服务。