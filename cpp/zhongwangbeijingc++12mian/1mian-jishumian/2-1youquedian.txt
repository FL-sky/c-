运行期多态与编译期多态优缺点分析

运行期多态优点
1.OO设计中重要的特性，对客观世界直觉认识。
2.能够处理同一个继承体系下的异质类集合。


运行期多态缺点
1.运行期间进行虚函数绑定，提高了程序运行开销。
2.庞大的类继承层次，对接口的修改易影响类继承层次。
3.由于虚函数在运行期在确定，所以编译器无法对虚函数进行优化。
4.虚表指针增大了对象体积，类也多了一张虚函数表，当然，这是理所应当值得付出的资源消耗，列为缺点有点勉强。


编译期多态优点
1.它带来了泛型编程的概念，使得C++拥有泛型编程与STL这样的强大武器。
2.在编译器完成多态，提高运行期效率。
3.具有很强的适配性与松耦合性，对于特殊类型可由模板偏特化、全特化来处理。


编译期多态缺点
1.程序可读性降低，代码调试带来困难。
2.无法实现模板的分离编译，当工程很大时，编译时间不可小觑。
3.无法处理异质对象集合。



关于显式接口与隐式接口
所谓的显式接口是指类继承层次中定义的接口或是某个具体类提供的接口，总而言之，我们能够在源代码中找到这个接口.显式接口以函数签名为中心，例如

void AnimalShot(Animal & anim)
{
    anim.shout();
}


我们称shout为一个显式接口。在运行期多态中的接口皆为显式接口。

而对模板参数而言，接口是隐式的，奠基于有效表达式。例如：

template <typename T>
void AnimalShot(T & anim)
{
    anim.shout();
}

对于anim来说，必须支持哪一种接口，要由模板参数执行于anim身上的操作来决定，在上面这个例子中，T必须支持shout()操作，那么shout就是T的一个隐式接口。